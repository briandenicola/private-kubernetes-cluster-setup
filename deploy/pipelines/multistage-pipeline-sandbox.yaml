trigger:
  branches:
    include:
    - dev
  paths:
    exclude:
    - Deploy/*

variables:
  STORAGE_ACCOUNT:    "bjdterraform001"
  PLAN_FILE:          "aks.sandbox.plan.${today}-${uuid}"              
  AKS_RG_NAME:        "DevSub02_K8SSandbox_RG"
  ACR_NAME:           "bjd145"

stages:
- stage: build
  jobs: 
  - job: 'Publish_Files'
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: Code
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: PublishBuildArtifacts@1
   
- stage: deploy
  jobs:
  - deployment: 'Build_AKS'
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'AKSSandbox'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              targetPath: '$(System.ArtifactsDirectory)/'
            displayName: Get Artifacts 

          - bash: |
              today=`date +"%y%m%d"`
              uuid=`uuidgen | sed 's/-//g'`

              export ARM_CLIENT_ID="$(client_id)"
              export ARM_CLIENT_SECRET="$(client_secret)"
              export ARM_SUBSCRIPTION_ID="$(subscription_id)"
              export ARM_TENANT_ID="$(tenant_id)"

              cd '$(System.ArtifactsDirectory)/drop'

              wget https://releases.hashicorp.com/terraform/1.0.5/terraform_1.0.5_linux_amd64.zip
              unzip terraform_1.0.5_linux_amd64.zip
              
              ./terraform init -backend=true -backend-config="access_key=$(access_key)" -backend-config="key=sandbox.terraform.tfstate"
              ./terraform plan -out="$(PLAN_FILE)" -var "resource_group_name=$(AKS_RG_NAME)" -var-file="sandbox.tfvars"
              ./terraform apply -auto-approve $(PLAN_FILE)

              az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} --tenant ${ARM_TENANT_ID}
              az account set -s ${ARM_SUBSCRIPTION_ID}
              az storage copy --source-local-path "./$(PLAN_FILE)" --destination-account-name $(STORAGE_ACCOUNT) --destination-container plans
            displayName: Build Cluster
#
#          - bash: |
#              export RG="$(AKS_RG_NAME)"
#              aks=`az aks list -g ${RG} --query "[0].name" -o tsv`
#              az aks get-credentials -n $aks -g ${RG}
#            displayName: Get Kube Credentials 

#          - bash: |
#              wget https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz
#              tar zxvf helm-v3.0.2-linux-amd64.tar.gz  
#            displayName: Download Helm 

#          - bash: |
#              cd linux-amd64
#              ./helm repo add stable https://kubernetes-charts.storage.googleapis.com/
#              ./helm repo update
#              ./helm upgrade  traefik stable/traefik --install --set rbac.enabled=true
#            displayName: Install Ingress Controller 

#          - bash: |
#              cd linux-amd64
#              ./helm repo add aad-pod-identity https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts
#              ./helm repo update
#              ./helm upgrade aad-pod-identity aad-pod-identity/aad-pod-identity --install 
#            displayName: Install Pod Identity             